# Sample workflow for building and deploying a Gatsby site to GitHub Pages
#
# To get started with Gatsby see: https://www.gatsbyjs.com/docs/quick-start/
#
name: Deploy Gatsby site to FTP

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - 'master'
  schedule:
    - cron: '30 03 28-31 * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MAILCHIMP_ENDPOINT: ${{ secrets.MAILCHIMP_ENDPOINT }}
  FTP_SERVER: ${{ secrets.FTP_SERVER }}
  FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
  FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
  GATSBY_TEASER_ENABLED: ${{ vars.TEASER_ENABLED }}

# # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'prod'
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # # Build job
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Detect package manager
  #       id: detect-package-manager
  #       run: |
  #         if [ -f "${{ github.workspace }}/yarn.lock" ]; then
  #           echo "manager=yarn" >> $GITHUB_OUTPUT
  #           echo "command=install" >> $GITHUB_OUTPUT
  #           exit 0
  #         elif [ -f "${{ github.workspace }}/package.json" ]; then
  #           echo "manager=npm" >> $GITHUB_OUTPUT
  #           echo "command=ci" >> $GITHUB_OUTPUT
  #           exit 0
  #         else
  #           echo "Unable to determine package manager"
  #           exit 1
  #         fi
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: ${{ steps.detect-package-manager.outputs.manager }}
  #     - name: Setup Pages
  #       id: pages
  #       uses: actions/configure-pages@v3
  #       with:
  #         # Automatically inject pathPrefix in your Gatsby configuration file.
  #         #
  #         # You may remove this line if you want to manage the configuration yourself.
  #         static_site_generator: gatsby
  #     - name: Restore cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           public
  #           .cache
  #         key: ${{ runner.os }}-gatsby-build-${{ hashFiles('public') }}
  #         restore-keys: |
  #           ${{ runner.os }}-gatsby-build-
  #     - name: Install dependencies
  #       run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
  #     - name: Build with Gatsby
  #       env:
  #         PREFIX_PATHS: 'true'
  #       run: ${{ steps.detect-package-manager.outputs.manager }} run build --prefix-paths
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v2
  #       with:
  #         path: ./public

  # Deployment job
  build-deploy:
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Gatsby
        env:
          PREFIX_PATHS: 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} run build --prefix-paths
      # - name: Upload from public_html via FTP
      #   uses: airvzxf/ftp-deployment-action@latest
      #   id: deployment
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     user: ${{ secrets.FTP_USERNAME }}
      #     password: ${{ secrets.FTP_PASSWORD }}
      #     local_dir: './public'
      #     remote_dir: '/www/touchepasamonloyer.be/test'
      #     lftp_settings: 'set ftp:ssl-force on;set ssl:verify-certificate true; set ftp:ssl-protect-data true;'
      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: 'ftp://tumulte.domainepublic.net/'
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: './public/'
          server-dir: '/www/touchepasamonloyer.be/test/'
          protocol: ftps
          port: 21
